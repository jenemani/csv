{"version":3,"file":"static/js/main.a75b5634.js","mappings":"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","sources":["mockedJson.js","index.js"],"sourcesContent":["//Format of data:\n// - if data has headers, then Map<string, array<string>>\n// - if data does not have headers, then array<array<string>>\nvar headerData = {\n    \"id\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\n    \"city\": [\"Providence\", \"Boston\", \"Dallas\", \"Los Angeles\", \"San Francisco\"],\n    \"state\": [\"RI\", \"MA\", \"TX\", \"CA\", \"CA\"]\n};\nvar noHeaderData = [\n    [\"1\", \"2\", \"3\", \"4\", \"5\"],\n    [\"Providence\", \"Boston\", \"Dallas\", \"Los Angeles\", \"San Francisco\"],\n    [\"RI\", \"MA\", \"TX\", \"CA\", \"CA\"]\n];\nvar emptyHeaders = {};\nvar emptyHeadersWithKey = {\n    \"a\": []\n};\nvar emptyNoHeaders = [];\nvar emptyNoHeadersWithArr = [[]];\nvar headerSearch = {\n    \"id 2\": [[\"2\", \"Boston\", \"MA\"]],\n    \"state CA\": [[\"4\", \"Los Angeles\", \"CA\"], [\"5\", \"San Francisco\", \"CA\"]],\n    \"state ca\": [],\n    \"id 10\": []\n};\nvar noHeaderSearch = {\n    \"0 1\": [[\"1\", \"Providence\", \"RI\"]],\n    \"1 Providence\": [[\"1\", \"Providence\", \"RI\"]],\n    \"2 RI\": [[\"1\", \"Providence\", \"RI\"]],\n    \"0 2\": [[\"2\", \"Boston\", \"MA\"]],\n    \"1 Boston\": [[\"2\", \"Boston\", \"MA\"]],\n    \"2 MA\": [[\"2\", \"Boston\", \"MA\"]],\n    \"0 3\": [[\"1\", \"Providence\", \"RI\"]],\n    \"1 Dallas\": [[\"1\", \"Providence\", \"RI\"]],\n    \"2 TX\": [[\"1\", \"Providence\", \"RI\"]],\n    \"0 4\": [[\"1\", \"Providence\", \"RI\"]],\n    \"1 Los Angeles\": [[\"1\", \"Providence\", \"RI\"]],\n    \"2 CA\": [[\"4\", \"Los Angeles\", \"CA\"], [\"5\", \"San Francisco\", \"CA\"],],\n    \"0 5\": [[\"5\", \"San Francisco\", \"CA\"]],\n    \"1 San Fransisco\": [[\"5\", \"San Francisco\", \"CA\"]],\n};\nvar emptyHeaderKeySearch = {\n    \"a hi\": [],\n    \"a Hi\": [],\n    \"a 31\": []\n};\nvar emptyNoHeaderSearch = {\n    \"0 hi\": [],\n    \"0 Hi\": [],\n    \"0 31\": []\n};\nvar dataMap = {\n    \"data/headerData.csv\": headerData,\n    \"data/noHeaderData.csv\": noHeaderData,\n    \"data/emptyHeader.csv\": emptyHeaders,\n    \"data/emptyHeaderKeys.csv\": emptyHeadersWithKey,\n    \"data/emptyNoHeader.csv\": emptyNoHeaders,\n    \"data/emptyNoHeaderArr.csv\": emptyNoHeadersWithArr\n};\nvar searchMap = {\n    \"data/headerData.csv\": headerSearch,\n    \"data/noHeaderData.csv\": noHeaderSearch,\n    \"data/emptyHeaderKeys.csv\": emptyHeaderKeySearch,\n    \"data/emptyNoHeaderArr.csv\": emptyNoHeaderSearch\n};\nexport { dataMap, searchMap };\n","import { dataMap, searchMap } from \"./mockedJson.js\";\n// Elements from HTML for direct access in typescript\nvar commandInput;\nvar history;\nvar modeDisplay;\n// Array of command history to allow for re-rendering when switching modes\nvar historyValues = [];\n// Variable for loaded CSV\nvar file = null;\n// Variable for storing loaded file name\nvar fileName = null;\n// Brief mode variable\nvar briefMode = true;\n// Map of commands to functions\nvar commandMap = {\n    \"search\": search,\n    \"view\": view,\n    \"load_file\": loadFile,\n    \"mode\": toggleMode\n};\n// The window.onload callback is invoked when the window is first loaded by the browser\nwindow.onload = function () {\n    prepareKeypress();\n    prepareButtonPress();\n    prepareHistory();\n    prepareModeDisplay();\n    renderModeDisplay();\n};\n// Function that mimics loading and parsing data\n// Returns:\n//    - Map<string, array<string>> if data has header\n//    - array<array<string>> if data does not have header\nfunction getData(path) {\n    return dataMap[path];\n}\n// Prepares the display of the \"Brief\" / \"Verbose\" mode\nfunction prepareModeDisplay() {\n    var maybeMode = document.getElementById(\"mode\");\n    if (maybeMode == null) {\n        console.log(\"mode display not found\");\n    }\n    else if (!(maybeMode instanceof HTMLSpanElement)) {\n        console.log(\"Found element \".concat(maybeMode, \", but not span\"));\n    }\n    else {\n        modeDisplay = maybeMode;\n        renderModeDisplay();\n    }\n}\n// Renders only the display of the \"Brief\" / \"Verbose\" mode\nfunction renderModeDisplay() {\n    if (modeDisplay == null)\n        return;\n    if (briefMode) {\n        modeDisplay.innerHTML = \"Brief\";\n    }\n    else {\n        modeDisplay.innerHTML = \"Verbose\";\n    }\n}\n// Toggles between \"Brief\" / \"Verbose\" mode. Users can choose to specify which mode\nfunction toggleMode(args) {\n    if (args.length > 2) {\n        // If more arguments than intended, return error string\n        return \"Error: incorrect number of arguments\";\n    }\n    if (args.length === 1) {\n        // If only one argument, which is the \"mode\" command itself, then flip briefMode to other mode\n        briefMode = !briefMode;\n    }\n    else {\n        // If there is another argument, argument 1 must specify \"Brief\" / \"Verbose\"\n        var arg = args[1].toLowerCase();\n        // Toggle briefMode accordingly\n        if (arg === \"brief\") {\n            briefMode = true;\n        }\n        else if (arg === \"verbose\") {\n            briefMode = false;\n        }\n        else {\n            // If mode not recognized, return error string\n            return \"Error: Unrecognized mode \".concat(args[1], \", please select either \\\"Brief\\\" or \\\"Verbose\\\"\");\n        }\n    }\n    // Re-render display of mode and history div\n    renderHistory();\n    renderModeDisplay();\n    // Return command output\n    return \"Mode switched to \".concat(briefMode ? '\"Brief\"' : '\"Verbose\"');\n}\n// Function for viewing the CSV file\n// Returns a string of the HTML table element if possible\nfunction view(args) {\n    if (file == null) {\n        return \"No file loaded\";\n    }\n    if (args.length !== 1) {\n        return \"Error: incorrect number of arguments\";\n    }\n    var tableString = \"<table>\";\n    var restructuredArr = [];\n    if (file instanceof (Array)) {\n        if (file.length !== 0) {\n            for (var _ in file[0]) {\n                restructuredArr.push(\"<tr>\");\n            }\n            file.forEach(function (arr) {\n                var rowNum = 0;\n                arr.forEach(function (elem) {\n                    restructuredArr[rowNum] += \"<td>\".concat(elem, \"</td>\");\n                    rowNum += 1;\n                });\n            });\n            restructuredArr = restructuredArr.map(function (tr) {\n                return tr + \"</tr>\";\n            });\n        }\n    }\n    else {\n        if (Object.keys(file).length !== 0) {\n            var header = \"<tr>\";\n            for (var k in file) {\n                header += \"<th>\".concat(k, \"</th>\");\n            }\n            header += \"</tr>\";\n            tableString += header;\n            file[Object.keys(file)[0]].forEach(function (_) {\n                restructuredArr.push(\"<tr>\");\n            });\n            var _loop_1 = function (k) {\n                var rowNum = 0;\n                file[k].forEach(function (elem) {\n                    restructuredArr[rowNum] += \"<td>\".concat(elem, \"</td>\");\n                    rowNum += 1;\n                });\n            };\n            for (var k in file) {\n                _loop_1(k);\n            }\n            restructuredArr = restructuredArr.map(function (tr) {\n                return tr + \"</tr>\";\n            });\n        }\n    }\n    tableString += restructuredArr.join(\"\");\n    tableString += \"</table>\";\n    return tableString;\n}\n// Function for unloading file\nfunction unloadFile() {\n    fileName = null;\n    file = null;\n}\n// Function for loading the CSV file\n// Parameter is filepath\n// Returns whether file is loaded or not\nfunction loadFile(args) {\n    // Return error for wrong number of arguments\n    if (args.length !== 2) {\n        return \"Error: Wrong number of arguments, please only provide path to the CSV\";\n    }\n    // get fileData via getData() function\n    var path = args[1];\n    var fileData = getData(path);\n    // Determine what type fileData is\n    if (fileData == null) {\n        return \"Error: File not found\";\n    }\n    else if (fileData instanceof (Array)) {\n        file = fileData;\n        fileName = path;\n        return \"Loaded \".concat(path, \" as a CSV file with no header\");\n    }\n    else {\n        file = fileData;\n        fileName = path;\n        return \"Loaded \".concat(path, \" as a CSV file with header\");\n    }\n}\n// Function for searching in CSV\n// Parameters are column (index or name) and value\n// Returns table of row(s) in which the value is present\nfunction search(args) {\n    // Return error for wrong number of arguments\n    if (args.length !== 3) {\n        return \"Error: Wrong number of arguments, please provide column index/name and value to search for\";\n    }\n    if ((fileName == null) || (file == null)) {\n        return \"Error: No file loaded, please use load_file command to load file\";\n    }\n    var results;\n    var col = args[1];\n    var value = args[2];\n    var searches = searchMap[fileName];\n    var colId = col.trim();\n    if (colId.length === 0) {\n        return \"Error: empty column id\";\n    }\n    var colInd = parseInt(colId);\n    // check file type\n    if (file instanceof (Array)) {\n        // file has no header, make sure col is integer, col exists, and returns relevant search\n        if (isNaN(colInd)) {\n            return \"Error: please provide column index for file without header\";\n        }\n        if (file.length <= colInd) {\n            return \"Error: column not found\";\n        }\n        if (searches[\"\".concat(colInd, \" \").concat(value)] === undefined) {\n            return \"No results\";\n        }\n        results = searches[\"\".concat(colInd, \" \").concat(value)];\n    }\n    else {\n        // file has header, make sure col exists and returns relevant search\n        if (file[colId] === undefined) {\n            return \"Error: column not found\";\n        }\n        if (searches[\"\".concat(colId, \" \").concat(value)] === undefined) {\n            return \"No results\";\n        }\n        results = searches[\"\".concat(colId, \" \").concat(value)];\n    }\n    if (results.length == 0) {\n        return \"No results\";\n    }\n    var table = \"<table>\";\n    results.forEach(function (row) {\n        table += \"<tr>\";\n        row.forEach(function (elem) {\n            table += \"<td>\".concat(elem, \"</td>\");\n        });\n        table += \"</tr>\";\n    });\n    table += \"</table>\";\n    return table;\n}\n// Prepares the repl history div element\nfunction prepareHistory() {\n    var maybeHistory = document.getElementById(\"history\");\n    if (maybeHistory == null) {\n        console.log(\"Couldn't find div element\");\n    }\n    else if (!(maybeHistory instanceof HTMLDivElement)) {\n        console.log(\"Found element \".concat(maybeHistory, \", but it wasn't a Div\"));\n    }\n    else {\n        history = maybeHistory;\n    }\n}\n// Prepares the command submit button element and adds listener\nfunction prepareButtonPress() {\n    var maybeButtons = document.getElementsByClassName(\"submit-button\");\n    var maybeButton = maybeButtons.item(0);\n    if (maybeButton == null) {\n        console.log(\"Couldn't find input element\");\n    }\n    else if (!(maybeButton instanceof HTMLButtonElement)) {\n        console.log(\"Found element \".concat(maybeButton, \", but it wasn't a Button\"));\n    }\n    else {\n        maybeButton.addEventListener(\"click\", handleButton);\n    }\n}\n// Function for clearing command history both in record and HTML\nfunction clearHistory() {\n    historyValues = [];\n    if (history == null)\n        return;\n    history.innerHTML = \"\";\n}\n// Re-renders all previous commands and outputs based on brief mode\nfunction renderHistory() {\n    if (history == null)\n        return;\n    // Clear HTML in history div\n    history.innerHTML = \"\";\n    // For every (command, output) pair, render based on brief mode\n    historyValues.forEach(function (value) {\n        if (briefMode) {\n            history.innerHTML += \"\\n            <div class=\\\"repl-block\\\">\\n            \".concat(value.output, \"\\n            </div>\");\n        }\n        else {\n            history.innerHTML += \"\\n            <div class=\\\"repl-block\\\">\\n            Command: \".concat(value.command, \"\\n            <hr>\\n            Output: \").concat(value.output, \"\\n            </div>\");\n        }\n    });\n}\n// Handles button-click event\nfunction handleButton(_) {\n    // Check if command input is empty\n    if (commandInput.value.trim() !== \"\") {\n        // Split input into arguments\n        var args = commandInput.value.trim().split(\" \");\n        // Retrieve function from commandMap\n        var possibleFunc = commandMap[args[0]];\n        // Instantiate result string\n        var res = void 0;\n        if (possibleFunc == null) {\n            // If there is no function mapped to the given command, then it is an invalid command\n            res = \"Invalid command\";\n        }\n        else {\n            // If there is a function, pass in all arguments of command\n            res = possibleFunc(args);\n        }\n        // Record command and output\n        historyValues.push({\n            command: commandInput.value,\n            output: res\n        });\n        // Re-render history div based on brief mode settings\n        renderHistory();\n    }\n    // Clear command input\n    commandInput.value = \"\";\n}\n// Prepares for Keypress events\nfunction prepareKeypress() {\n    // As far as TypeScript knows, there may be *many* elements with this class.\n    var maybeInputs = document.getElementsByClassName('repl-command-box');\n    // Assumption: there's only one thing\n    var maybeInput = maybeInputs.item(0);\n    // Is the thing there? Is it of the expected type? \n    //  (Remember that the HTML author is free to assign the repl-input class to anything :-) )\n    if (maybeInput == null) {\n        console.log(\"Couldn't find input element\");\n    }\n    else if (!(maybeInput instanceof HTMLInputElement)) {\n        console.log(\"Found element \".concat(maybeInput, \", but it wasn't an input\"));\n    }\n    else {\n        commandInput = maybeInput;\n        // Notice that we're passing *THE FUNCTION* as a value, not calling it.\n        // The browser will invoke the function when a key is pressed with the input in focus.\n        //  (This should remind you of the strategy pattern things we've done in Java.)\n        commandInput.addEventListener(\"keypress\", handleKeypress);\n    }\n}\n// We'll use a global state reference for now\nvar pressCount = 0;\nfunction getPressCount() {\n    return pressCount;\n}\nfunction handleKeypress(event) {\n    // The event has more fields than just the key pressed (e.g., Alt, Ctrl, etc.)\n    if (event.key === \"Enter\") {\n        handleButton(null);\n    }\n    pressCount = pressCount + 1;\n    console.log(event.key === \"Enter\");\n}\n// Provide this to other modules (e.g., for testing!)\n// The configuration in this project will require /something/ to be exported.\nexport { handleKeypress, prepareKeypress, getPressCount, handleButton, briefMode, loadFile, toggleMode, view, clearHistory, unloadFile, search, renderHistory, historyValues, prepareButtonPress, prepareHistory, prepareModeDisplay, renderModeDisplay };\n"],"names":["commandInput","history","modeDisplay","dataMap","searchMap","historyValues","file","fileName","briefMode","commandMap","args","length","results","col","value","searches","colId","trim","colInd","parseInt","Array","isNaN","undefined","concat","table","forEach","row","elem","tableString","restructuredArr","_","push","arr","rowNum","map","tr","Object","keys","header","k","_loop_1","join","path","fileData","getData","arg","toLowerCase","renderHistory","renderModeDisplay","innerHTML","output","command","handleButton","split","possibleFunc","res","window","onload","maybeInput","document","getElementsByClassName","item","console","log","HTMLInputElement","addEventListener","handleKeypress","prepareKeypress","maybeButton","HTMLButtonElement","prepareButtonPress","maybeHistory","getElementById","HTMLDivElement","prepareHistory","maybeMode","HTMLSpanElement","prepareModeDisplay","event","key"],"sourceRoot":""}